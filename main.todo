✔ Loadfiles @done(24-08-10 00:48)
✔ MainMenu @done(24-08-11 14:48)
    ✔ Show new button sintead of loading screen @started(24-08-11 15:09) @done(24-08-11 17:43) @lasted(2h34m49s)
    ✔ Show share button @done(24-08-11 17:43)
    ✔ Show delete button @done(24-08-11 15:09)
    ✔ Display grid dynamically @done(24-08-11 17:24)
☐ Thumbnails
☐ settings menu
☐ Share 
☐ Interface
☐ toasts 
☐ Android / IOS 
☐ Button to hot switch between the last two brushes
☐ Custom Color palette
☐ Custom Brush settings 
    ✔ Adjustable size @done(24-08-11 01:15) alpha v.0.0.2
☐ Layers (Moveable, hideable, etc) using caching
☐ Images
☐ Text
☐ Shapes (Arcs, squares, circles, etc)
✔ haptic feedback on android @done(24-08-11 14:48) alpha v.0.0.2
✔ undo/redo @done(24-08-11 01:50)

----
# Bugs 
✔ Loading files broke again - FIXED @done(24-08-10 00:48)
✔ saving files might be broken? see above. - FIXED @done(24-08-10 00:48)
✔ able to save empty file names - FIXED but introduced: @done(24-08-10 00:48)
✔ Cancelling saving will leave the filename empty instead -> Will name "unknown" @done(24-08-10 19:34)
✔ will exit canvas instead of cancelling saving @done(24-08-10 19:34)
✔ Doesn't check for invalid file names properly :SOB: maybe use prebuilt solution @done(24-08-10 19:34)
✔ saving an untitled file will save it as "Untitled" @done(24-08-10 19:34)
- Selecting lines/polygones doesn't work, because detetion is based solely on the points and not the area between them. 
    - Unfortunately this might require a full rewrite of the selection logic. Otherwise performance might become an issue
✔ cannot exit without saving, due to the way the file is saved. @done(24-08-11 15:08)
- FileSaveDialog too... tall? Odd. 
- Selection color hardcoded. Darkmode makes it invisible.
- Android doesn't work: 
    ✔ Scaling is off @done(24-08-11 17:53) ?? 
    - touch support is inconsistant
    ✔ can't access options (need to push them down by the nozle thingy) @done(24-08-11 01:15)

---
- Moveable, modular Interface
- Tablet mode
- hotkeys

# Selection logic:
1. detect a tap & hold gesture on the GestureDetecter 
2. Pass that coordinate to the DrawingContext's selectStroke method
3.1. Check each strokes boundary box for a match and return a list of possible matches
3.2. narrow down the matches by checking each individual point (Possibly stop once one is "close enough")
4. Create a temporary layer for the stroke that is drawn above the canvas allowing for free movement
5. Once let go, readd the stroke to the list of strokes in the buffer and transform it's coordinates
6. (Maybe also show highlight points to transform? Such as ends of a line. Also allow for scaling?)