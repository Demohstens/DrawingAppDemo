✔ Loadfiles @done(24-08-10 00:48)
✔ MainMenu @done(24-08-11 14:48)
    ✔ Show new button sintead of loading screen @started(24-08-11 15:09) @done(24-08-11 17:43) @lasted(2h34m49s)
    ✔ Show share button @done(24-08-11 17:43)
    ✔ Show delete button @done(24-08-11 15:09)
    ✔ Display grid dynamically @done(24-08-11 17:24)
☐ Thumbnails
✔ settings menu @done(24-08-11 18:45)
☐ Share 
https://pub.dev/packages/share_pluss
☐ Interface
    ☐ Custom Context Menu
☐ toasts 
☐ Android / IOS 
☐ Button to hot switch between the last two brushes
☐ Custom Color palette
☐ Custom Brush settings 
    ✔ Adjustable size @done(24-08-11 01:15) alpha v.0.0.2
☐ Layers (Moveable, hideable, etc) using caching
☐ Images
☐ Text
☐ Shapes (Arcs, squares, circles, etc)
✔ haptic feedback on android @done(24-08-11 14:48) alpha v.0.0.2
✔ undo/redo @done(24-08-11 01:50)

----
# Bugs 
✔ Loading files broke again - FIXED @done(24-08-10 00:48)
✔ saving files might be broken? see above. - FIXED @done(24-08-10 00:48)
✔ able to save empty file names - FIXED but introduced: @done(24-08-10 00:48)
✔ Cancelling saving will leave the filename empty instead -> Will name "unknown" @done(24-08-10 19:34)
✔ will exit canvas instead of cancelling saving @done(24-08-10 19:34)
✔ Doesn't check for invalid file names properly :SOB: maybe use prebuilt solution @done(24-08-10 19:34)
✔ saving an untitled file will save it as "Untitled" @done(24-08-10 19:34)
- Selecting lines/polygones doesn't work, because detetion is based solely on the points and not the area between them. 
    - Unfortunately this might require a full rewrite of the selection logic. Otherwise performance might become an issue
✔ cannot exit without saving, due to the way the file is saved. @done(24-08-11 15:08)
✔ FileSaveDialog too... tall? Odd. @done(24-08-11 20:20)
- Selection color hardcoded. Darkmode makes it invisible.
- Android doesn't work: 
    ✔ Scaling is off @done(24-08-11 17:53) ?? 
    - touch support is inconsistant
    ✔ can't access options (need to push them down by the nozle thingy) @done(24-08-11 01:15)
✔ Rewrite RepaintListener to allow for unloading of Listeners. @done(24-08-13 14:21) replaced with ValueNotifier

# For alpha 1:
✔ fix undo/redo @done(24-08-13 10:28)
✔ fix file loading and saving @done(24-08-13 15:20)
✔ fix line tool @started(24-08-13 11:09) @done(24-08-13 11:18) @lasted(9m55s)
✔ fix reset @started(24-08-13 10:28) @done(24-08-13 12:59) @lasted(2h31m39s)
✔ Remove reload button on home screen @done(24-08-13 12:59)
☐ add welcome pop-up?
☐ update readme
☐ share feature
✔ rename file feature @started(24-08-13 15:20) @done(24-08-13 16:15) @lasted(55m26s)


☐ fix selecting strokes  | CANCELLED FOR NOW
☐ fix and make remove stroke more performant


---
- Moveable, modular Interface
- Tablet mode
- hotkeys

# Selection logic:
1. detect a tap & hold gesture on the GestureDetecter 
2. Pass that coordinate to the DrawingContext's selectStroke method
3.1. Check each strokes boundary box for a match and return a list of possible matches
3.2. narrow down the matches by checking each individual point (Possibly stop once one is "close enough")
4. Create a temporary layer for the stroke that is drawn above the canvas allowing for free movement
5. Once let go, readd the stroke to the list of strokes in the buffer and transform it's coordinates
6. (Maybe also show highlight points to transform? Such as ends of a line. Also allow for scaling?)

# Pan and Zoom
Option 1:
    Use a common CustomPaint object and paint a static lazy image of the canvas on it. 
    Then use a Transform widget to move and scale the canvas then restore and draw the current 
    strokes on top of it before merging it with the static image.
Option 2:
    Use a CustomPaint object for the canvas and a separate CustomPaint object for the strokes. 
    Then use a Transform widget to move and scale the canvas and strokes separately. 
    This would require a lot of extra logic to keep the strokes in sync with the canvas.
Option 3: 
    Use a main global canvsa to lazypaint on, then use a Transform widget to move and scale the canvas. 
    Then use a Active Painter to draw acoording to the TransFormationController.

Option 4: 
    Subtract the size difference of the two canvases, 